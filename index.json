[{"categories":null,"contents":"S. Shu, W. Yang, J. Pan and L. Cai, \u0026quot;A Multipath Extension to the QUIC Module for ns-3,\u0026quot; 2023 Workshop on ns-3 (WNS3), Arlington, VA, USA, 2023, pp. 608-615, doi: 3592149.3592803\nAbstract: Network transmission with multiple interfaces is desirable for the next-generation Internet to improve end-to-end performance and reliability. Multipath QUIC is thus proposed to utilize multiple interfaces for Internet transmission with QUIC, while QUIC is already standardized and active in use by several mainstream web browsers. However, the majority of the (MP)QUIC experimental platforms are built upon real systems or network emulators, which makes it challenging to investigate and experiment for further exploration. An MPQUIC simulation platform is still largely missing in the research community. In this paper, we present our implementation and improvement of MPQUIC based on the QUIC module for ns-3, along with a description of the features that we have implemented. We also demonstrate the performance of MPQUIC using an expanding series of experiments under various scenarios. Our implementation meets the demands for scalable multiple paths, flexible path schedulers, and compatible congestion control algorithms.\n","permalink":"https://ssjshirley.github.io/publications/mpquic_ns_3/","tags":["MPQUIC","Network Simulation","ns-3","Transport Protocols"],"title":"A Multipath Extension to the QUIC Module for ns-3"},{"categories":null,"contents":"W. Yang, L. Cai, S. Shu and J. Pan, \u0026quot;Scheduler Design for Mobility-aware Multipath QUIC,\u0026quot; 2022 IEEE Global Communications Conference (GLOBECOM), Rio de Janeiro, Brazil, 2022, pp. 2849-2854, doi: 10.1109/GLOBECOM48099.2022.10001247.\nAbstract: The Integrated Terrestrial and LEO satellite network (ITSN) is promising for providing ubiquitous communication services. In ITSN, network mobility brings new challenges and attracts attention. In this paper, we promote a new transport layer protocol, Multipath QUIC (MPQUIC) to deal with the network mobility issue in ITSN. ITSN is characterized by high bandwidth delay product (BDP). The standard congestion control algorithm of MPQUIC, Opportunistic Linked Increases Algorithm (OLIA), encounters great challenges such as congestion window (cwnd) overshooting whenever handoff, which motivates our proposal, a Mobility-aware Multipath QUIC (MM-QUIC) congestion control algorithm. MM-QUIC leverages the periodical changes of path capacity and good similarity among disjoint subflows to quickly start a new round of transmission, and employs a multipath-based fluid model to determine the cwnd adjustment in the congestion avoidance phase. Finally, simulation results on NS-3 demonstrate that MM-QUIC can offer up to 50% throughput improvement compared to OLIA in ITSN.\n","permalink":"https://ssjshirley.github.io/publications/scheduler_design_for_mobility_aware_multipath_quic/","tags":["Out-of-order","Multipath","Goodput","Mobility","Scheduling"],"title":"Scheduler Design for Mobility-aware Multipath QUIC"},{"categories":null,"contents":"Network transmission with multiple interfaces is desirable for the next-generation Internet to improve end-to-end performance and reliability. Multipath QUIC (MPQUIC) is proposed to utilize multiple access links and paths for non-interrupted Internet transmission building upon QUIC, a newly standardized transport layer protocol. The lightning talk will describe the current effort to develop a multipath extension to the QUIC module in ns-3. This extension has the scalability of multiple paths, the flexibility of the path schedulers, and the extensibility of the congestion control algorithms, providing a stable simulation platform for the research community on multipath transport layer protocols. The development of MPQUIC overcomes the challenges of advertising multiple addresses, separating transmission paths, and extending the scheduling and congestion control algorithms, while still maintaining the fundamental transmission features. The result verifies the correctness of the implementation and showcases the performance of MPQUIC with a set of experimentations. This effort is underway; we will further implement the currently missing functions in MPQUIC ns-3 and keep updating it according to the IETF draft. Exploring better scheduling and congestion control algorithms will also be considered in our future work. This is joint work with my collaborators Wenjun Yang, Jianping Pan, and Lin Cai.\n","permalink":"https://ssjshirley.github.io/publications/mpquic_talk/","tags":["MPQUIC","Network Simulation","ns-3","Transport Protocols"],"title":" A Multipath Extension to the QUIC Module in ns-3"},{"categories":null,"contents":"W. Yang, S. Shu, L. Cai and J. Pan, \u0026quot;MM-QUIC: Mobility-aware Multipath QUIC for Satellite Networks,\u0026quot; 2021 17th International Conference on Mobility, Sensing and Networking (MSN), Exeter, United Kingdom, 2021, pp. 608-615, doi: 10.1109/MSN53354.2021.00093.\nAbstract: The Integrated Terrestrial and LEO satellite network (ITSN) is promising for providing ubiquitous communication services. In ITSN, network mobility brings new challenges and attracts attention. In this paper, we promote a new transport layer protocol, Multipath QUIC (MPQUIC) to deal with the network mobility issue in ITSN. ITSN is characterized by high bandwidth delay product (BDP). The standard congestion control algorithm of MPQUIC, Opportunistic Linked Increases Algorithm (OLIA), encounters great challenges such as congestion window (cwnd) overshooting whenever handoff, which motivates our proposal, a Mobility-aware Multipath QUIC (MM-QUIC) congestion control algorithm. MM-QUIC leverages the periodical changes of path capacity and good similarity among disjoint subflows to quickly start a new round of transmission, and employs a multipath-based fluid model to determine the cwnd adjustment in the congestion avoidance phase. Finally, simulation results on NS-3 demonstrate that MM-QUIC can offer up to 50% throughput improvement compared to OLIA in ITSN.\n","permalink":"https://ssjshirley.github.io/publications/mmquic/","tags":["MPQUIC","Congestion Control","Mobility Management","Satellite Network"],"title":"MM-QUIC: A mobility-aware multipath QUIC for satellite networks"},{"categories":null,"contents":"QUIC, which stands for Quick UDP Internet Connections, is a transport layer protocol developed by Google. It was designed to improve the performance of web communication and address some of the limitations of the traditional Transmission Control Protocol (TCP). QUIC operates over the User Datagram Protocol (UDP) instead of TCP, which allows for faster and more efficient data transmission.\nQUIC was initially developed to enhance the performance of web applications, particularly for mobile devices and real-time communication. It aims to reduce latency and improve reliability, even in challenging network conditions. By using UDP as its underlying protocol, QUIC avoids some of the overhead and congestion control mechanisms of TCP, resulting in faster connection establishment and reduced latency.\nOne of the key features of QUIC is its ability to establish secure connections more quickly. It incorporates encryption from the beginning, providing transport security by default. This eliminates the need for additional layers such as Transport Layer Security (TLS) in the initial handshake process, reducing the latency associated with establishing secure connections.\nThis talk will introduce it in following topics.\n What is QUIC? Why does QUIC become popular? What is the benefits of QUIC? some related works around QUIC.  ","permalink":"https://ssjshirley.github.io/publications/quic_talk/","tags":["QUIC","TCP","Transport Protocol"],"title":"Introduction of Quick UDP Internet Connection (QUIC) Protocol"},{"categories":null,"contents":"","permalink":"https://ssjshirley.github.io/projects/contributions/mpquic-ns3-git/","tags":["MPQUIC","C++","Network Simulator","Python","ns-3"],"title":"MPQUIC NS3"},{"categories":null,"contents":"Intro Doesn\u0026rsquo;t matter whether it\u0026rsquo;s a CakePHP app for a client, your own personal CMS, or any other web based application. If your passing around passwords or other sensitive info you should really implement SSL. SSL provides 2 main perks to your visitors.\n First it encrypts all communication that flies across the web. This prevents curious or devious billies from getting your secrets. Secondly it ensures to the user that your server is in fact who it claims, and not a nasty \u0026lsquo;man in the middle\u0026quot; attack. Finally it gives your site that touch of class\u0026hellip;. which of course a classy person like yourself relies on.  Once you implement SSL certificates on your server you\u0026rsquo;ll want to require secure connections using Apache\u0026rsquo;s rewrite module. Now I won\u0026rsquo;t dwell on the creation and signing of certificates, its already well documented.Â If your just starting out though,heres a few links I recommend;\n Creating self-signed certificates (free, but should only be used internally or for testing, users will; see an \u0026lsquo;Untrusted\u0026quot; warning) Requesting a CA Signed certificate (not free, but the final certificate is trusted and seamless for users)  The second link uses the schools internal CA, you will need to pay a public CA like Entrust or Verisign. All of this information is aimed at \u0026lsquo;nix or solaris servers running apache. Why? cause a production windows server is laughable :-p\nNow that you have a certificate, whats next? So there you are you have a shiny new Certificate and Server key, how do you force visitors to your apache driven site to use the SSL? You copied the certificates into the appropite locations right? And you have made the needed changes in httpd.conf right? So now when you view https://example.com you see a \u0026lsquo;trusted\u0026rsquo; warning or your site right? If No to any of these than this article does a pretty good job of outlining those steps.\nThe SSL Works, How do I force connections to use it? First you need to decide if you want to force every page on your site to use SSL, or only a particular sub-domain, or maybe just your admin directory.Â Since the overhead is minimal there is no harm is forcing the entire domain to leverage SSL, but if it is a self-signed certificate for your personal use than you\u0026rsquo;ll most certainly want to restrict its use to your own areas. This prevents users from seeing that nasty warning \u0026ldquo;This server is not trusted\u0026rdquo; You\u0026rsquo;ll know if your using SSL because the url prefix changes from http to https (s for secure).\nForcing entire domain to use SSL You want any visit, any where to use ssl. This probably the simplest solution. Create or append to your htaccess file in the top directory of your server. Some people use a port check (80 is typically http, while 443 is https) but if you have alernate configs or the user just adds :8080 to the end of the url this method is useless. Instead check whether the https environmental variable is set, if not then redirect.\nRewriteCond %{HTTPS} !=on RewriteRule ^(.*)$ https://%{SERVER_NAME}$1 \\[R,L\\]  Forcing sub-domains to use SSL Maybe you only want mysecretarea.example.com to use SSL, that\u0026rsquo;s easy enough. Its the same premise as above, but you move the htaccess file into the directory that corresponds to the subdomain. Also change the second line like below;\nRewriteCond %{HTTPS} !=on RewriteRule ^(.*)$ https://mysecretarea.%{SERVER_NAME}$1 \\[R,L\\]  Forcing a directory to use SSL This method cn get a little hairier if your using aliases or redirects on top of this one. You\u0026rsquo;ll need to consider what order the commands are read. The basic principle is like so.Â You want all visits to example.com/admin to use ssl. Create a htaccess file in the parent directory.Â Again will check for the https variable, but this time we also check for the sub-directory to be in the path.\nRewriteCond %{HTTPS} !=on RewriteRule ^/admin/(.*)$ https://%{SERVER_NAME}/admin/$1 \\[R,L\\]  ","permalink":"https://ssjshirley.github.io/blog/force-ssl/","tags":["apache","apache","redirect","rewrite","ssl","web development"],"title":"Forcing Visits to use SSL"},{"categories":null,"contents":"","permalink":"https://ssjshirley.github.io/projects/creations/blockchain/","tags":null,"title":"Blockchain based Criminal Records Database"},{"categories":null,"contents":"Design a multipath QUIC protocol on ns-3 based on the theorem of MPTCP and QUIC. Realized majority functions of QUIC protocol over a socket based network system, written in C++. Research on the performance with various combination of transmission types.\n","permalink":"https://ssjshirley.github.io/projects/creations/mpquic-ns3/","tags":["Multipath QUIC","network simulation","ns-3","transport protocols","C++"],"title":"Multipath QUIC Protocol Design"},{"categories":null,"contents":"","permalink":"https://ssjshirley.github.io/projects/creations/predicthotel/","tags":null,"title":"Predict Hotel Type in Expedia"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml\n[outputs] home = [\u0026quot;HTML\u0026quot;, \u0026quot;JSON\u0026quot;]  Searching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category\n... \u0026quot;contents\u0026quot;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026quot;tags\u0026quot;:{{ .Params.tags | jsonify }}{{end}}, \u0026quot;categories\u0026quot; : {{ .Params.categories | jsonify }}, ...  Edit fuse.js options to Search static/js/search.js\nkeys: [ \u0026quot;title\u0026quot;, \u0026quot;contents\u0026quot;, \u0026quot;tags\u0026quot;, \u0026quot;categories\u0026quot; ]  ","permalink":"https://ssjshirley.github.io/search/","tags":null,"title":"Search Results"}]